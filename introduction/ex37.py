print('and')
print('Logical and used to join for logic')
print(True and False)
print('----------------------------')
print('as')
print('used in with-as statements to make an alias')
print('with open file.txt as f')
print('----------------------------')
print('assert')
print('checks that something is true')
print('assert False, "Error!"')
print('----------------------------')
print("break")
print("stops a loop immediately")
print("while True: break")
print('----------------------------')
print("class")
print("defines a class")
print("class Person(object)")
print('----------------------------')
print("continue")
print("stops a loop from further processing and goes to the next iteration")
print("while True: continue")
print('----------------------------')
print("def")
print("defines a function")
print("def X(): pass")
print('----------------------------')
print("del")
print("removes an entry from a dictionary")
print("del X[Y]")
print('----------------------------')
print("elif")
print("else if condition")
print('----------------------------')
print("else")
print("else condition")
print('----------------------------')
print("except")
print("if an exception happens, do this")
print("except Error as e: print(e)")
print('----------------------------')
print("finally")
print("do this no matter what")
print("finally: pass")
print('----------------------------')
print("for")
print("loops over a collection")
print("for X in Y: pass")
print('----------------------------')
print("from")
print("import specific parts of a module")
print("from X import Y")
print('----------------------------')
print("global")
print("declare you want a global variable")
print("global X")
print('----------------------------')
print("if")
print("if condition")
print('----------------------------')
print("import")
print("bring in a module to use")
print("import os")
print('----------------------------')
print("in")
print("used in for loops")
print("for X in Y")
print("can also be used for testing existence of something")
print("1 in [1] == True")
print('----------------------------')
print("is")
print("tests == equality")
print("1 is 1 == True")
print('----------------------------')
print("lambda")
print("creates an anonymous function")
print("s = lambda y: y ** y)
print('----------------------------')
print("not")
print("logical negative")
print("not True == False")
print('----------------------------')
print("or")
print("logical switch")
print('----------------------------')
print("pass")
print("This block is empty")
print("def empty: pass")
print('----------------------------')
print("print")
print("print string")
print('----------------------------')
print("raise")
print("raise exception")
print("raise ValueError('No')"
print('----------------------------')
print("return")
print("Exit function with a return value")
print('----------------------------')
print("try")
print("Try this block, if exception go to except")
print('----------------------------')
print("while")
print("while loop")
print('----------------------------')
print("with")
print("with an expression as a variable, do this")
print("with X as Y: pass")
print('----------------------------')
print("yield")
print("Pause here and return to caller")
print("def X(): yield Y; X().next()")


